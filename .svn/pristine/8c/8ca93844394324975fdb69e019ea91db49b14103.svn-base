/**     
 * @discription {楼盘管理接口文件}
 * @author wangxinjie       
 * @created 2016年11月6日 下午9:25:22    
 */

package hitwh.fanghh.controller;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import hitwh.fanghh.annotation.RequiredPermission;
import hitwh.fanghh.bean.HouseStyleBean;
import hitwh.fanghh.bean.PicTalkBean;
import hitwh.fanghh.bean.BuildingSurroundBean;
import hitwh.fanghh.pojo.Building;
import hitwh.fanghh.pojo.Buildingpic;
import hitwh.fanghh.pojo.Housepricetrend;
import hitwh.fanghh.pojo.Pictalk;
import hitwh.fanghh.pojo.Surroundfacility;
import hitwh.fanghh.service.BuildingComment;
import hitwh.fanghh.service.BuildingService;
import hitwh.fanghh.util.DictionaryString;
import hitwh.fanghh.util.ResponseMapUtil;

/**
 * Title: BuildingController.java Description: 描述
 * 
 * @author wangxinjie
 * @created 2016年11月6日 下午9:25:22
 */
@Controller
@RequestMapping(value = "building")
public class BuildingController {
	@Autowired
	private BuildingService buildingService;

	@Autowired
	private BuildingComment buildingComment;

	@RequestMapping("/getAllRegion")
	@ResponseBody
	public Map<String, Object> getAllRegion(HttpSession session) {
		return ResponseMapUtil.responseListMap(buildingService.getAllRegion());
	}

	@RequestMapping("/getAllDeveloper")
	@ResponseBody
	public Map<String, Object> getAllDeveloper(HttpSession session) {
		return ResponseMapUtil.responseListMap(buildingService
				.getAllDeveloper());
	}

	@RequestMapping("/getBuildingPageNum")
	@ResponseBody
	public Map<String, Object> getBuildingPageNum(@RequestParam int pageMaxNum) {
		int num = buildingService.getBuildingPageNum(pageMaxNum);
		return ResponseMapUtil.responseSuccess(num);
	}

	@RequestMapping("/getAllBuilding")
	@ResponseBody
	public Map<String, Object> getAllBuilding(@RequestParam int pageMaxNum,
			@RequestParam int pageNo, HttpSession session) {
		return ResponseMapUtil.responseListMap(buildingService.getAllBuilding(
				pageMaxNum, pageNo));
	}

	@RequestMapping("/getBuildingByRegionId")
	@ResponseBody
	public Map<String, Object> getBuildingByRegionId(@RequestParam int regionId,HttpSession session) {
		return ResponseMapUtil.responseListMap(buildingService.getBuildingByRegionId(regionId));
	}
	
	@RequestMapping("/getBuildingInfo")
	@ResponseBody
	public Map<String, Object> getBuildingInfo(@RequestParam int buildingId,
			HttpSession session) {
		return ResponseMapUtil.responseSuccess(buildingService
				.getBuildingInfo(buildingId));
	}

	@RequestMapping("/addBuilding")
	@ResponseBody
	public Map<String, Object> addBuilding(@RequestBody Building building) {
		int res = 0;
		if (building == null) {
			return ResponseMapUtil.responseError("数据异常,添加失败");
		}
		res = buildingService.addBuilding(building);
		if (res != 0) {
			return ResponseMapUtil.responseSuccess(res);
		} else {
			return ResponseMapUtil.responseError("数据异常,添加失败");
		}
	}

	/**
	 * 楼盘图片上传
	 * 
	 * @Title: uploadBuildingPic
	 * @version:
	 * @author: wangxinjie
	 * 
	 * @param file
	 * @return
	 */
	@RequestMapping("/uploadBuildingPic")
	@ResponseBody
	public Map<String, Object> uploadStylePic(MultipartFile file) {
		String res = buildingService.uploadStylePic(file);
		if (res != null) {
			return ResponseMapUtil.responseSuccess(res);
		} else {
			return ResponseMapUtil.responseError(null);
		}
	}

	@RequestMapping("/addBuildingPic")
	@ResponseBody
	public Map<String, Object> addBuildingPic(@RequestBody Buildingpic buildingpic) {
		boolean res = buildingService.addBuildingPic(buildingpic);
		if (res) {
			return ResponseMapUtil.responseSuccess("添加图片成功");
		} else {
			return ResponseMapUtil.responseError("数据异常，添加失败");
		}
	}
	
	@RequestMapping("/deleteBuildingPic")
	@ResponseBody
	public Map<String, Object> deleteBuildingPic(@RequestParam int bpId) {
		boolean res = buildingService.deleteBuildingPic(bpId);
		if (res) {
			return ResponseMapUtil.responseSuccess("删除图片成功");
		} else {
			return ResponseMapUtil.responseError("数据异常，删除失败");
		}
	}
	
	@RequestMapping("/addSurround")
	@ResponseBody
	public Map<String, Object> addSurround(
			@RequestBody BuildingSurroundBean buildingSurroundBean) {
		boolean res = buildingService.addSurround(buildingSurroundBean);
		if (res) {
			return ResponseMapUtil.responseSuccess("增加成功");
		} else {
			return ResponseMapUtil.responseError("数据异常，增加失败");
		}
	}

	@RequestMapping("/getSurround")
	@ResponseBody
	public Map<String, Object> getSurround(@RequestParam int buildingId) {
		return ResponseMapUtil.responseSuccess(buildingService
				.getSurround(buildingId));
	}

	@RequestMapping("/updateSurround")
	@ResponseBody
	public Map<String, Object> updateSurround(
			@RequestBody BuildingSurroundBean buildingSurroundBean) {
		boolean res = buildingService.updateSurround(buildingSurroundBean);
		if (res) {
			return ResponseMapUtil.responseSuccess("更新成功");
		} else {
			return ResponseMapUtil.responseError("数据异常，更新失败");
		}

	}

	@RequestMapping("/deleteSurround")
	@ResponseBody
	public Map<String, Object> deleteSurround(@RequestParam int buildingId) {
		boolean res = buildingService.deleteSurround(buildingId);
		if (res) {
			return ResponseMapUtil.responseSuccess("删除成功");
		} else {
			return ResponseMapUtil.responseError("数据异常，删除失败");
		}

	}

	@RequestMapping("/updateBuilding")
	@ResponseBody
	public Map<String, Object> updateBuilding(@RequestBody Building building) {
		if (building == null) {
			return ResponseMapUtil.responseError("数据异常,添加失败");
		}
		if (buildingService.updateBuilding(building)) {
			return ResponseMapUtil.responseSuccess("添加成功");
		} else {
			return ResponseMapUtil.responseError("数据异常,添加失败");
		}
	}

	@RequestMapping("/applicateBuildingOnSaleAndOffSale")
	@ResponseBody
	public Map<String, Object> applicateHouseOnSale(
			@RequestParam int buildingId, @RequestParam boolean applicationType) {
		int resultCode;
		String buildingApplicationStatus = null;
		if (applicationType) {
			buildingApplicationStatus = DictionaryString.APPLICATION_ON_SALE;
		} else {
			buildingApplicationStatus = DictionaryString.APPLICATION_OFF_SALE;
		}
		resultCode = buildingService.applicateBuildingOffSaleByHouseId(
				buildingId, buildingApplicationStatus);
		if (resultCode == 1) {
			return ResponseMapUtil.responseSuccess(resultCode);
		} else {
			return ResponseMapUtil.responseError("楼盘申请上下架失败");
		}
	}

	@RequiredPermission
	@RequestMapping("/auditBuildingApplication")
	@ResponseBody
	public Map<String, Object> auditBuildingApplication(
			@RequestParam int buildingId, @RequestParam boolean auditResult,
			@RequestParam String auditNotPassReason) {
		int resultCode;
		String auditCode = null;
		if (!auditResult) {
			auditCode = DictionaryString.AUDIT_NOT_PASS;
			resultCode = buildingService.auditBuildingApplicationNotPass(
					buildingId, auditCode, auditNotPassReason);
		} else {
			auditCode = DictionaryString.AUDIT_PASS;
			resultCode = buildingService.auditBuildingApplicationPass(
					buildingId, auditCode);
		}
		if (resultCode == 1) {
			return ResponseMapUtil.responseSuccess("楼盘审核成功");
		} else {
			return ResponseMapUtil.responseError("楼盘审核失败");
		}
	}

	@RequestMapping("/getHouseTrend")
	@ResponseBody
	public Map<String, Object> getHouseTrend(@RequestParam int buildingId,
			HttpSession session) {
		return ResponseMapUtil.responseListMap(buildingService
				.selectHouseTrendByBuildingId(buildingId));
	}

	@RequestMapping("/addHousepricetrend")
	@ResponseBody
	public Map<String, Object> addHousepricetrend(
			@RequestBody Housepricetrend housepricetrend, HttpSession session) {
		if (housepricetrend == null) {
			return ResponseMapUtil.responseError("数据异常,添加失败");
		}
		if (buildingService.addHousePriceTrend(housepricetrend)) {
			return ResponseMapUtil.responseSuccess("添加成功");
		} else {
			return ResponseMapUtil.responseError("数据异常,添加失败");
		}
	}

	@RequestMapping("/deleteHousepricetrend")
	@ResponseBody
	public Map<String, Object> deleteHousepricetrend(@RequestParam int trendId,
			HttpSession session) {
		if (buildingService.deleteHousePriceTrend(trendId)) {
			return ResponseMapUtil.responseSuccess("删除成功");
		} else {
			return ResponseMapUtil.responseError("数据异常,删除失败");
		}
	}

	@RequestMapping("/updateHousepricetrend")
	@ResponseBody
	public Map<String, Object> updateHousepricetrend(
			@RequestBody Housepricetrend housepricetrend, HttpSession session) {
		if (buildingService.updateHousePriceTrend(housepricetrend)) {
			return ResponseMapUtil.responseSuccess("删除成功");
		} else {
			return ResponseMapUtil.responseError("数据异常,删除失败");
		}
	}

	@RequestMapping("/getAllBuildingcomment")
	@ResponseBody
	public Map<String, Object> getAllBuildingcomment(
			@RequestParam int buildingId, @RequestParam int pageMaxNum,
			@RequestParam int pageNo, HttpSession session) {
		return ResponseMapUtil.responseObjectMap(buildingComment
				.getAllBuildingComment(buildingId, pageMaxNum, pageNo));
	}

	@RequestMapping("/selectBuildingcomment")
	@ResponseBody
	public Map<String, Object> selectBuildingcomment(
			@RequestParam int commentId, HttpSession session) {
		return ResponseMapUtil.responseObjectMap(buildingComment
				.selectBuildingComment(commentId));
	}

	@RequestMapping("/selectBuildingCommentByBuildingId")
	@ResponseBody
	public Map<String, Object> selectBuildingCommentByBuildingId(
			@RequestParam int buildingId, HttpSession session) {
		return ResponseMapUtil.responseListMap(buildingComment
				.selectBuildingCommentByBuildingId(buildingId));
	}

	@RequestMapping("/deleteBuildingcomment")
	@ResponseBody
	public Map<String, Object> deleteBuildingcomment(
			@RequestParam int commentId, HttpSession session) {
		if (buildingComment.deleteBuildingComment(commentId)) {
			return ResponseMapUtil.responseSuccess("删除成功");
		} else {
			return ResponseMapUtil.responseError("出现异常,删除失败");
		}
	}

	/**
	 * 
	 * @discription 上传看图说房的图片
	 * @author fengben
	 * @created 2016年12月27日下午6:39:52
	 * @param
	 * @return
	 */
	@RequestMapping("/uploadPicTalkPic")
	@ResponseBody
	public Map<String, Object> uploadPicTalkPic(MultipartFile file) {
		String res = buildingService.uploadPicTalkPic(file);
		if (res != null) {
			return ResponseMapUtil.responseSuccess(res);
		} else {
			return ResponseMapUtil.responseSuccess(null);
		}

	}

	/**
	 * 添加看图说房
	 * 
	 * @Title: addPicTalk
	 * @version:
	 * @author: fengben
	 * 
	 * @param houseStyleBean
	 *            /json
	 * @return
	 */
	@RequestMapping("/addPicTalk")
	@ResponseBody
	public Map<String, Object> addPicTalk(@RequestBody PicTalkBean picTalkBean) {
		if (buildingService.addPicTalk(picTalkBean)) {
			return ResponseMapUtil.responseSuccess("添加成功");
		} else {
			return ResponseMapUtil.responseError("数据异常,添加失败");
		}
	}

	@RequestMapping("/updatePicTalk")
	@ResponseBody
	public Map<String, Object> updatePicTalk(
			@RequestBody PicTalkBean picTalkBean, HttpSession session) {
		if (buildingService.updatePicTalk(picTalkBean)) {
			return ResponseMapUtil.responseSuccess("更新成功");
		} else {
			return ResponseMapUtil.responseError("数据异常,更新失败");
		}
	}

	@RequestMapping("/deletePicTalk")
	@ResponseBody
	public Map<String, Object> deletePicTalk(@RequestParam int ptID,
			HttpSession session) {
		if (buildingService.deletePicTalk(ptID)) {
			return ResponseMapUtil.responseSuccess("删除成功");
		} else {
			return ResponseMapUtil.responseError("出现异常,删除失败");
		}
	}

	/**
	 * 根据楼盘id获取看图说房
	 * 
	 * @Title: getPicTalk
	 * @version:
	 * @author: fengben
	 * 
	 * @param buildingId
	 * @return
	 */
	@RequestMapping("/getPicTalk")
	@ResponseBody
	public Map<String, Object> getPicTalk(@RequestParam int buildingId) {
		PicTalkBean picTalkBean = buildingService.getPicTalk(buildingId);
		return ResponseMapUtil.responseSuccess(picTalkBean);
	}

}
