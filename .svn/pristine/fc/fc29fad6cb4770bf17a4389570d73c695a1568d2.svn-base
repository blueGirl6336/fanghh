package hitwh.fanghh.service.impl;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import hitwh.fanghh.bean.HouseBean;
import hitwh.fanghh.bean.PerferentialActivityBean;
import hitwh.fanghh.bean.PerferentialRuleBean;
import hitwh.fanghh.dao.ActivityDao;
import hitwh.fanghh.dao.BuildingDao;
import hitwh.fanghh.dao.GrouppurchasehouselistDao;
import hitwh.fanghh.dao.GrouppurchaseinfoDao;
import hitwh.fanghh.dao.HouseDao;
import hitwh.fanghh.dao.PerferentialhouseinfoDao;
import hitwh.fanghh.dao.PerferentialhouselistDao;
import hitwh.fanghh.dao.PerferentialruleDao;
import hitwh.fanghh.pojo.Activity;
import hitwh.fanghh.pojo.Housestyle;
import hitwh.fanghh.pojo.Perferentialhouselist;
import hitwh.fanghh.pojo.Perferentialrule;
import hitwh.fanghh.service.ActivityService;
import hitwh.fanghh.service.HouseService;
import hitwh.fanghh.util.DictionaryString;
import hitwh.fanghh.util.PageCalculate;

@Service
public class ActivityServiceImpl implements ActivityService
{
	@Autowired
	private HttpSession session;

	@Autowired
	private ActivityDao activityDao;

	@Autowired
	private HouseDao houseDao;
	@Autowired
	private BuildingDao buildingDao;
	@Autowired
	private HouseService houseService;

	@Autowired
	private PerferentialruleDao perferentialruleDao;

	@Autowired
	private PerferentialhouseinfoDao perferentialhouseinfoDao;

	@Autowired
	private PerferentialhouselistDao perferentialHouseListDao;

	@Autowired
	private GrouppurchaseinfoDao grouppurchaseinfoDao;

	@Autowired
	private GrouppurchasehouselistDao grouppurchasehouselistDao;
	@Autowired
	private PerferentialhouselistDao perferentialhouselistDao;
	

	@Override
	public String addPerferentialActivity(PerferentialActivityBean perferentialActivityBean)
	{
		int res1 = 0;
		int res2 = 0;

		if (perferentialActivityBean != null)
		{
			Activity activity = new Activity();
			Date date = new Date();
			DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			String time = format.format(date);
			activity.setActivityName(perferentialActivityBean.getActivityName());
			activity.setBuildingId(perferentialActivityBean.getBuildingId());
			activity.setStartDate(perferentialActivityBean.getStartTime());
			activity.setEndDate(perferentialActivityBean.getEndTime());
			activity.setState(null);
			activity.setModifiedTime(time);
			int activityId = activityDao.insertSelective(activity);
			if (perferentialActivityBean.getHouseBeanList() != null)
			{

				for (HouseBean houseBean : perferentialActivityBean.getHouseBeanList())
				{
					Perferentialhouselist perferentialHouseList = new Perferentialhouselist();
					perferentialHouseList.setHouseId(houseBean.getHouseId());
					perferentialHouseList.setActivityId(activityId);
					res1 = perferentialHouseListDao.insertSelective(perferentialHouseList);

				}
			}
			if (perferentialActivityBean.getPerferentialRuleBeanList() != null)
			{
				for (PerferentialRuleBean perferentialRuleBean : perferentialActivityBean.getPerferentialRuleBeanList())
				{
					Perferentialrule perferentialRule = new Perferentialrule();
					perferentialRule.setActivityId(activityId);
					perferentialRule.setPerferentialDescription(perferentialRuleBean.getPerferentialDescription());
					perferentialRule.setPerferentialRuleType(perferentialRuleBean.getPerferentialRuleType());
					perferentialRule.setPerferentialTitle(perferentialRuleBean.getPerferentialRuleTitle());
					perferentialRule.setIsUsed(true);
					res2 = perferentialruleDao.insertSelective(perferentialRule);
				}
			}
		}
		if (res1 != 0 && res2 != 0)
		{
			return "success";
		} else
		{
			return "数据库更新失败res1 :" + res1 + "res2:" + res2;
		}

	}

	@Override
	public List<PerferentialActivityBean> getAllPerferentialActivity(Integer regionId, String keyBuildingName,
			int pageMaxNum, int pageNo)
	{
		Object cityIdObject = session.getAttribute("cityId");
		Integer cityId = cityIdObject == null ? null : Integer.parseInt(cityIdObject.toString());

		int pageNum = getPerferentialActivityPageNum(pageMaxNum);
		PageCalculate pageCalculate = new PageCalculate(pageNum, pageMaxNum, pageNo);
		List<Activity> activityList = activityDao.selectByRegionIdAndKeyBuildingNameAndCityId(cityId, regionId,
				keyBuildingName, pageCalculate);
		List<PerferentialActivityBean> perferentialActivityList = new ArrayList<PerferentialActivityBean>();
		List<HouseBean> houseBeanList = new ArrayList<HouseBean>();
		if (activityList != null)
		{
			for (Activity activity : activityList)
			{
				PerferentialActivityBean perferentialActivityBean = new PerferentialActivityBean();
				List<PerferentialRuleBean> perferentialRuleBeanList = new ArrayList<PerferentialRuleBean>();
				perferentialActivityBean.setActivityId(activity.getActivityId());
				perferentialActivityBean.setActivityName(activity.getActivityName());
				perferentialActivityBean.setBuildingId(activity.getBuildingId());
				perferentialActivityBean.setBuildingName(buildingDao.getBuildingNameById(activity.getBuildingId()));
				perferentialActivityBean.setEndTime(activity.getEndDate());
				perferentialActivityBean.setModifiedTime(activity.getModifiedTime());
				perferentialActivityBean.setStartTime(activity.getStartDate());
				perferentialActivityBean.setState(activity.getState());
				perferentialActivityBean.setActivityType(activity.getActivityType());
				List<Perferentialrule> perferentialRuleList = new ArrayList<Perferentialrule>();
				perferentialRuleList = perferentialruleDao.selectByActivityId(activity.getActivityId());
				if (perferentialRuleList != null)
				{
					for (Perferentialrule perferentialRule : perferentialRuleList)
					{
						if (perferentialRule.getIsUsed())
						{
							PerferentialRuleBean perferentialRuleBean = new PerferentialRuleBean();
							perferentialRuleBean.setActivityId(perferentialRule.getActivityId());
							perferentialRuleBean
									.setPerferentialDescription(perferentialRule.getPerferentialDescription());
							perferentialRuleBean.setPerferentialRuleTitle(perferentialRule.getPerferentialTitle());
							perferentialRuleBean.setPerferentialRuleType(perferentialRule.getPerferentialRuleType());
							perferentialRuleBean.setRuleId(perferentialRule.getRuleId());
							perferentialRuleBeanList.add(perferentialRuleBean);
						}
					}
					perferentialActivityBean.setPerferentialRuleBeanList(perferentialRuleBeanList);
				} else
				{
					perferentialActivityBean.setPerferentialRuleBeanList(null);
				}
				List<Perferentialhouselist> perferentialHouselist = new ArrayList<Perferentialhouselist>();
				perferentialHouselist = perferentialHouseListDao.selectByActivityId(activity.getActivityId());
				if (perferentialHouselist != null)
				{
					for (Perferentialhouselist perferentialHouse : perferentialHouselist)
					{
						HouseBean houseBean = new HouseBean();
						houseBean = houseService.getHouseById(perferentialHouse.getHouseId());
						houseBeanList.add(houseBean);
					}
					perferentialActivityBean.setHouseBeanList(houseBeanList);
				} else
				{
					perferentialActivityBean.setHouseBeanList(null);
				}
				perferentialActivityList.add(perferentialActivityBean);
			}
		}

		return perferentialActivityList;
	}

	@Override
	public int getPerferentialActivityPageNum(int pageMaxNum)
	{
		// TODO Auto-generated method stub
		int houseNum = activityDao.countActivity(DictionaryString.PERFERENTIAL_ACTIVITY);
		return houseNum % pageMaxNum == 0 ? houseNum / pageMaxNum : houseNum / pageMaxNum + 1;

	}

	@Override
	public PerferentialActivityBean getSinglePerferentialActivity(int activityId) {
		// TODO Auto-generated method stub
		Activity activity = activityDao.selectByPrimaryKey(activityId);
		PerferentialActivityBean perferentialActivityBean = new PerferentialActivityBean();
		List<HouseBean> houseBeanList = new ArrayList<HouseBean>();
		if(activity != null)
		{
			
			List<PerferentialRuleBean> perferentialRuleBeanList = new ArrayList<PerferentialRuleBean>();
			perferentialActivityBean.setActivityId(activity.getActivityId());
			perferentialActivityBean.setActivityName(activity.getActivityName());
			perferentialActivityBean.setBuildingId(activity.getBuildingId());
			perferentialActivityBean.setBuildingName(buildingDao.getBuildingNameById(activity.getBuildingId()));
			perferentialActivityBean.setEndTime(activity.getEndDate());
			perferentialActivityBean.setModifiedTime(activity.getModifiedTime());
			perferentialActivityBean.setStartTime(activity.getStartDate());
			perferentialActivityBean.setState(activity.getState());
			perferentialActivityBean.setActivityType(activity.getActivityType());
			List<Perferentialrule> perferentialRuleList = new ArrayList<Perferentialrule>();
			perferentialRuleList = perferentialruleDao.selectByActivityId(activity.getActivityId());
			if(perferentialRuleList != null)
			{	
				for(Perferentialrule perferentialRule : perferentialRuleList)
				{
						
					PerferentialRuleBean perferentialRuleBean = new PerferentialRuleBean();
					perferentialRuleBean.setActivityId(perferentialRule.getActivityId());
					perferentialRuleBean.setPerferentialDescription(perferentialRule.getPerferentialDescription());
					perferentialRuleBean.setPerferentialRuleTitle(perferentialRule.getPerferentialTitle());
					perferentialRuleBean.setPerferentialRuleType(perferentialRule.getPerferentialRuleType());
					perferentialRuleBean.setRuleId(perferentialRule.getRuleId());
					perferentialRuleBeanList.add(perferentialRuleBean);
				}
				perferentialActivityBean.setPerferentialRuleBeanList(perferentialRuleBeanList);
			}else
			{
				perferentialActivityBean.setPerferentialRuleBeanList(null);
			}
			List<Perferentialhouselist> perferentialHouselist = new ArrayList<Perferentialhouselist>();
			perferentialHouselist = perferentialHouseListDao.selectByActivityId(activity.getActivityId());
			if(perferentialHouselist != null)
			{
				for(Perferentialhouselist perferentialHouse : perferentialHouselist)
				{
					HouseBean houseBean = new HouseBean();
					houseBean = houseService.getHouseById(perferentialHouse.getHouseId());
					houseBeanList.add(houseBean);	
				}
				perferentialActivityBean.setHouseBeanList(houseBeanList);
				}else
				{
					perferentialActivityBean.setHouseBeanList(null);
				}
				
			}
		
		return perferentialActivityBean;

	}

	@Override
	public List<PerferentialActivityBean> getPerferentialActivityByCity(String cityId, int pageMaxNum, int pageNo) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String updatePerferentialActivity(PerferentialActivityBean perferentialActivityBean) {
		int res1 = 0;
		int res2 = 0;

		if (perferentialActivityBean != null)
		{
			Activity activity = new Activity();
			Date date = new Date();
			DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			String time = format.format(date);
			activity.setActivityId(perferentialActivityBean.getActivityId());
			activity.setActivityName(perferentialActivityBean.getActivityName());
			activity.setBuildingId(perferentialActivityBean.getBuildingId());
			activity.setStartDate(perferentialActivityBean.getStartTime());
			activity.setEndDate(perferentialActivityBean.getEndTime());
			activity.setState(perferentialActivityBean.getState());
			activity.setModifiedTime(time);
			activityDao.updateByPrimaryKeySelective(activity);
			if (perferentialActivityBean.getHouseBeanList() != null)
			{

				for (HouseBean houseBean : perferentialActivityBean.getHouseBeanList())
				{	
					//perferentialHouseListDao.deleteByPrimaryKey(houseBean.getHouseId());
					Perferentialhouselist perferentialHouseList = new Perferentialhouselist();
					perferentialHouseList.setHouseId(houseBean.getHouseId());
					perferentialHouseList.setActivityId(perferentialActivityBean.getActivityId());
					perferentialHouseList.setPhlId(perferentialhouselistDao.selectIdByHouseId(houseBean.getHouseId()));
					res1 = perferentialHouseListDao.updateByPrimaryKeySelective(perferentialHouseList);
				}
			}
			if (perferentialActivityBean.getPerferentialRuleBeanList() != null)
			{
				for (PerferentialRuleBean perferentialRuleBean : perferentialActivityBean.getPerferentialRuleBeanList())
				{
					Perferentialrule perferentialRule = new Perferentialrule();
					perferentialRule.setActivityId(perferentialActivityBean.getActivityId());
					perferentialRule.setPerferentialDescription(perferentialRuleBean.getPerferentialDescription());
					perferentialRule.setPerferentialRuleType(perferentialRuleBean.getPerferentialRuleType());
					perferentialRule.setPerferentialTitle(perferentialRuleBean.getPerferentialRuleTitle());
					perferentialRule.setRuleId(perferentialRuleBean.getRuleId());
					res2 = perferentialruleDao.updateByPrimaryKeySelective(perferentialRule);
				}
			}
		}
		if (res1 != 0 && res2 != 0)
		{
			return "success";
		} else
		{
			return "数据库更新失败res1 :" + res1 + "res2:" + res2;
		}
	}


	@Override
	public int applicateActivityOnSaleByActivityId(int activityId) {
		// TODO Auto-generated method stub
		String applicationDicCode;
		String auditCode;
		int res = 0;
		int res1 = 0;
		Activity activity = activityDao.selectByPrimaryKey(activityId);
		if(activity == null)
		{
			return res;
		}
		
		applicationDicCode = activityDao.getActivityApplicationStatusByActivityId(activityId);
		auditCode = activityDao.getAuditStatusByActivityId(activityId);
		if(applicationDicCode.equals(DictionaryString.APPLICATION_WAIT) )
		{
			res = activityDao.updateActivityApplicationStatusByActivityId(activityId, DictionaryString.APPLICATION_ON_SALE);
			res1 = activityDao.updateAuditStatusByActivityId(activityId, DictionaryString.AUDIT_WAIT);
			if(res == 1 && res1 == 1)
			{
				return 1;
			}else
			{
				return res + res1;
			}
		}
		else
			return 0;
	}

	@Override
	public int applicateActivityOffSaleByActivityId(int activityId ) {
		// TODO Auto-generated method stub
		String applicationDicCode;
		String auditCode;
		int res =0; 
		int res1 = 0;
		Activity activity = activityDao.selectByPrimaryKey(activityId);
		if(activity == null)
		{
			return res;
		}
		applicationDicCode = activityDao.getActivityApplicationStatusByActivityId(activityId);
		auditCode = activityDao.getAuditStatusByActivityId(activityId);
		if(applicationDicCode.equals(DictionaryString.ON_SALE_ALREADY) && auditCode.equals(DictionaryString.AUDIT_PASS))
		{
			res = activityDao.updateActivityApplicationStatusByActivityId(activityId, DictionaryString.APPLICATION_OFF_SALE);
			res1 = activityDao.updateAuditStatusByActivityId(activityId, DictionaryString.AUDIT_WAIT);
			if(res == 1 && res1 == 1)
			{
				return 1;
			}else
			{
				return res + res1;
			}
		}
		else
			return 0;
	}

	@Override
	public String auditActivityApplicationByActivityId(int activityId, int auditType ,String auditNotPassReason) 
	{
		Activity activity = activityDao.selectByPrimaryKey(activityId);
		String applicationStatus =null;
		String auditStatus = null;
		int res1 = 0;
		int res2 = 0;
		if(activity == null)
		{
			return "未找到相应活动信息，错误的activityId" + activityId;
		}
		switch(auditType)
		{
		case 1: //审核通过上架申请
			applicationStatus = activity.getActivityApplicationStatus();
			auditStatus = activity.getState();
			if(applicationStatus.equals(DictionaryString.APPLICATION_ON_SALE) && auditStatus.equals(DictionaryString.AUDIT_WAIT))
			{
				res1 = activityDao.updateActivityApplicationStatusByActivityId(activityId, DictionaryString.ON_SALE_ALREADY);
				res2 = activityDao.updateAuditStatusByActivityId(activityId, DictionaryString.AUDIT_PASS);
				if(res1 == 1 && res2 == 1)
				{
					return "success";
				}else
				{
					return "活动上架审核通过异常" +"res1" + res1 +"res2"+ res2;
				}
			}
			break;
		case 2: //审核不通过上架申请
			applicationStatus = activity.getActivityApplicationStatus();
			auditStatus = activity.getState();
			if(applicationStatus.equals(DictionaryString.APPLICATION_ON_SALE) && auditStatus.equals(DictionaryString.AUDIT_WAIT))
			{
				res2 = activityDao.updateAuditStatusByActivityId(activityId, DictionaryString.AUDIT_NOT_PASS);
				res1 = activityDao.updateAuditNotPassReason(activityId, auditNotPassReason);
				if(res1 == 1 && res2 == 1)
				{
					return "success";
				}else
				{
					return "活动上架审核未通过异常" +"res1" + res1 +"res2"+ res2;
				}
			}
			break;
		case 3: //审核通过下架申请
			applicationStatus = activity.getActivityApplicationStatus();
			auditStatus = activity.getState();
			if(applicationStatus.equals(DictionaryString.APPLICATION_OFF_SALE) && auditStatus.equals(DictionaryString.AUDIT_WAIT))
			{
				res2 = activityDao.updateAuditStatusByActivityId(activityId, DictionaryString.AUDIT_PASS);
				res1 = activityDao.updateActivityApplicationStatusByActivityId(activityId, DictionaryString.OFF_SALE_ALREADY);
				if(res1 == 1 && res2 == 1)
				{
					return "success";
				}else
				{
					return "活动下架审核通过异常" +"res1" + res1 +"res2"+ res2;
				}
			}
			break;
		case 4: //审核不通过下架申请
			applicationStatus = activity.getActivityApplicationStatus();
			auditStatus = activity.getState();
			if(applicationStatus.equals(DictionaryString.APPLICATION_OFF_SALE) && auditStatus.equals(DictionaryString.AUDIT_WAIT))
			{
				res2 = activityDao.updateAuditStatusByActivityId(activityId, DictionaryString.AUDIT_NOT_PASS);
				res1 = activityDao.updateAuditNotPassReason(activityId, auditNotPassReason);
				if(res1 == 1 && res2 == 1)
				{
					return "success";
				}else
				{
					return "活动下架审核不通过异常" +"res1" + res1 +"res2"+ res2;
				}
			}
			break;
			
			
		}
		return "错误的auditType";
		
		
	}

	@Override
	public int giveAuditNotPassReason(int activityId, String auditNotPassReason)
	{
			return activityDao.updateAuditNotPassReason(activityId, auditNotPassReason);
	}

}
