package hitwh.fanghh.service.impl;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import javax.servlet.http.HttpSession;
import hitwh.fanghh.bean.HouseBean;
import hitwh.fanghh.dao.HouseDao;
import hitwh.fanghh.pojo.House;
import hitwh.fanghh.service.HouseService;
import hitwh.fanghh.util.DictionaryString;
import hitwh.fanghh.util.PageCalculate;
import hitwh.fanghh.util.RandomUtil;

@Service
public class HouseServiceImpl implements HouseService
{
	@Autowired
	private HouseDao houseDao;
	@Autowired
	private HttpSession session;
	@Override
	public List<HouseBean> getHouseByBuildingId(int buildingId, int pageMaxNum, int pageNo)
	{
		
		int pageNum = getHousePageNumByBuildingId(buildingId, pageMaxNum);
		PageCalculate pageCalculate = new PageCalculate(pageNum, pageMaxNum, pageNo);
		List<House> houseList = houseDao.selectByBuildingId(buildingId, pageCalculate);
		List<HouseBean> houseBeanList = new ArrayList<HouseBean>();
		for(House house : houseList){
			HouseBean houseBean = new HouseBean();
			if(house != null){
				houseBean.setArea(house.getArea());
				houseBean.setAuditStatus(house.getAuditStatus());
				houseBean.setBasementSquare(house.getBasementSquare());
				houseBean.setBuildingId(house.getBuildingId());
				houseBean.setDecoration(house.getDecoration());
				houseBean.setDownPayment(house.getDownPayment());
				houseBean.setFace(house.getFace());
				houseBean.setFloor(house.getFloor());
				houseBean.setHouseId(house.getHouseId());
				houseBean.setHouseNum(house.getHouseNum());
				houseBean.setHousePic(house.getHousePic());
				houseBean.setMaxFloor(house.getMaxFloor());
				houseBean.setMonthlyPayment(house.getMonthlyPayment());
				houseBean.setOrginalPrice(house.getOrginalPrice());
				houseBean.setParkingLotPrice(house.getParkingLotPrice());
				houseBean.setParkingPlaceArea(house.getParkingPlaceArea());
				houseBean.setRecommendReason(house.getRecommendReason());
				houseBean.setStyleId(house.getStyleId());
				houseBean.setUnitId(house.getUnitId());
				houseBean.setAuditNotPassReason(house.getAuditNotPassReason());
				houseBean.setHouseApplicationStatus(house.getHouseApplicationStatus());
				houseBean.setBuildingNo(house.getBuildingNo());
			}
			houseBeanList.add(houseBean);
		}
		return houseBeanList;
		
		
	}

	@Override
	public HouseBean getHouseById(int houseId)
	{
		House house =houseDao.selectByPrimaryKey(houseId);
		HouseBean houseBean= new HouseBean();
	
		if(house != null){
			houseBean.setArea(house.getArea());
			houseBean.setAuditStatus(house.getAuditStatus());
			houseBean.setBasementSquare(house.getBasementSquare());
			houseBean.setBuildingId(house.getBuildingId());
			houseBean.setDecoration(house.getDecoration());
			houseBean.setDownPayment(house.getDownPayment());
			houseBean.setFace(house.getFace());
			houseBean.setFloor(house.getFloor());
			houseBean.setHouseId(house.getHouseId());
			houseBean.setHouseNum(house.getHouseNum());
			houseBean.setHousePic(house.getHousePic());
			houseBean.setMaxFloor(house.getMaxFloor());
			houseBean.setMonthlyPayment(house.getMonthlyPayment());
			houseBean.setOrginalPrice(house.getOrginalPrice());
			houseBean.setParkingLotPrice(house.getParkingLotPrice());
			houseBean.setParkingPlaceArea(house.getParkingPlaceArea());
			houseBean.setRecommendReason(house.getRecommendReason());
			houseBean.setStyleId(house.getStyleId());
			houseBean.setUnitId(house.getUnitId());
			houseBean.setAuditNotPassReason(house.getAuditNotPassReason());
			houseBean.setHouseApplicationStatus(house.getHouseApplicationStatus());
			houseBean.setBuildingNo(house.getBuildingNo());
		}
		
		return houseBean;
	}

	@Override
	public int getHousePageNumByBuildingId(int buildingId, int pageMaxNum)
	{
		int houseNum = houseDao.countHouseByBuildingId(buildingId);
		return houseNum % pageMaxNum == 0 ? houseNum / pageMaxNum : houseNum / pageMaxNum + 1;
	}

	@Override
	public int applicateHouseOnSaleByHouseId(int houseId , String houseApplicationStatus) {
		// TODO Auto-generated method stub
		String applicationDicCode;
		applicationDicCode = houseDao.getHouseApplicationStatusByHouseId(houseId);
		if(applicationDicCode.equals(DictionaryString.APPLICATION_WAIT))
		{
			houseDao.updateHouseApplicationStatusByHouseId(houseId, houseApplicationStatus);
			return 1;
		}
		else
			return 0;
	}

	@Override
	public int applicateHouseOffSaleByHouseId(int houseId , String houseApplicationStatus) {
		// TODO Auto-generated method stub
		String applicationDicCode;
		applicationDicCode = houseDao.getHouseApplicationStatusByHouseId(houseId);
		if(applicationDicCode.equals(DictionaryString.ON_SALE_ALREADY))
		{
			houseDao.updateHouseApplicationStatusByHouseId(houseId, houseApplicationStatus);
			return 1;
		}
		else
			return 0;
	}

	@Override
	public int auditHouseApplicationByHouseId(int houseId, String auditStatus) 
	{
		// TODO Auto-generated method stub
		String auditDicCode;
		auditDicCode = houseDao.getHouseApplicationStatusByHouseId(houseId);
		if(auditDicCode.equals(DictionaryString.APPLICATION_ON_SALE))
		{
			houseDao.updateAuditStatusByHouseId(houseId, auditStatus);
			if(auditStatus.equals(DictionaryString.AUDIT_PASS))
			{
			houseDao.updateHouseApplicationStatusByHouseId(houseId, DictionaryString.ON_SALE_ALREADY);
			houseDao.updateAuditNotPassReason(houseId, null);
			}
			return 1;
		}
		if(auditDicCode.equals(DictionaryString.APPLICATION_OFF_SALE))
		{
			houseDao.updateAuditStatusByHouseId(houseId, auditStatus);
			if(auditStatus.equals(DictionaryString.AUDIT_PASS))
			{
			houseDao.updateHouseApplicationStatusByHouseId(houseId, DictionaryString.OFF_SALE_ALREADY);
			houseDao.updateAuditNotPassReason(houseId, null);
			}
			return 2;
		}
		else
			return 0;
	}
	public int giveAuditNotPassReason(int houseId , String auditNotPassReason)
	{
		return houseDao.updateAuditNotPassReason(houseId, auditNotPassReason);
	}
	public String getAuditNotPassReason(int houseId)
	{	
		return houseDao.getAuditNotPassReasonByHouseId(houseId);
	}

	@Override
	public String addHouse(HouseBean houseBean) {
		// TODO Auto-generated method stub
		House house = new House();
		if(houseBean == null)
		{
			return "服务器未收到数据";
		}
		house.setArea(houseBean.getArea());
		house.setStyleId(houseBean.getStyleId());
		house.setBuildingId(houseBean.getBuildingId());//房源所属楼盘
		house.setUnitId(houseBean.getUnitId());
		house.setHouseNum(houseBean.getHouseNum());
		house.setOrginalPrice(houseBean.getOrginalPrice());
		house.setDownPayment(houseBean.getDownPayment());
		house.setMonthlyPayment(houseBean.getMonthlyPayment());
		house.setAuditStatus(null);//房源审核状态 无
		house.setFace(houseBean.getFace());
		house.setMaxFloor(houseBean.getMaxFloor());
		house.setFloor(houseBean.getFloor());
		house.setDecoration(houseBean.getDecoration());
		house.setBasementSquare(houseBean.getBasementSquare());
		house.setParkingLotPrice(houseBean.getParkingLotPrice());
		house.setParkingPlaceArea(houseBean.getParkingPlaceArea());
		house.setRecommendReason(houseBean.getRecommendReason());
		house.setAuditNotPassReason(null);//审核不通过原因无
		house.setHouseApplicationStatus(DictionaryString.APPLICATION_WAIT);//新录入房源变为待审核状态
		house.setBuildingNo(houseBean.getBuildingNo());//房源楼号
		Object housePic = session.getAttribute("housePic");
		if(housePic != null)
		{
			house.setHousePic(housePic.toString());
		}
		int res = houseDao.insertSelective(house);
		session.removeAttribute("housePic");
		if(res == 1)
		{
			return "success";
		}else
		{
			return "数据库插入失败，res" + res;
		}
		
	}

	@Override
	public String updateHouse(HouseBean houseBean) {
		House house = new House();
		if(houseBean == null)
		{
			return "服务器未收到数据";
		}
		house.setHouseId(houseBean.getHouseId());
		house.setArea(houseBean.getArea());
		house.setStyleId(houseBean.getStyleId());
		house.setBuildingId(null);
		house.setUnitId(houseBean.getUnitId());
		house.setHouseNum(houseBean.getHouseNum());
		house.setOrginalPrice(houseBean.getOrginalPrice());
		house.setDownPayment(houseBean.getDownPayment());
		house.setMonthlyPayment(houseBean.getMonthlyPayment());
		house.setAuditStatus(null);//房源审核状态 无
		house.setFace(houseBean.getFace());
		house.setMaxFloor(houseBean.getMaxFloor());
		house.setFloor(houseBean.getFloor());
		house.setDecoration(houseBean.getDecoration());
		house.setBasementSquare(houseBean.getBasementSquare());
		house.setParkingLotPrice(houseBean.getParkingLotPrice());
		house.setParkingPlaceArea(houseBean.getParkingPlaceArea());
		house.setRecommendReason(houseBean.getRecommendReason());
		house.setAuditNotPassReason(null);//审核不通过原因无
		house.setHouseApplicationStatus(DictionaryString.APPLICATION_WAIT);//修改房源信息后变为待上架状态
		house.setBuildingNo(houseBean.getBuildingNo());
		house.setAttachedHouseDescription(null);
		house.setBasementPrice(null);
		house.setBasementSquare(null);
		house.setCurrentPrice(null);
		house.setCurrentPricePerSquare(null);
		house.setHasParkingLot(null);
		house.setHasParkingPlace(null);
		house.setHaveBasement(null);
		house.setHighestCommission(null);
		house.setHouseStatus(null);
		house.setMasterBedroomFace(null);
		house.setOrginalPricePerSquare(null);
		house.setOtherFacility(null);
		house.setRecommendReason(null);
		house.setRemark(null);
		
		Object housePic = session.getAttribute("housePic");
		if(housePic != null)
		{	
			if(houseBean.getHousePic() != null)
			{
				houseBean.setHousePic(houseBean.getHousePic() + "," + housePic.toString());  
			}else
			{
				houseBean.setHousePic(housePic.toString());
			}
			house.setHousePic(houseBean.getHousePic());
		}
		int res = houseDao.updateByPrimaryKeySelective(house);
		session.removeAttribute("housePic");
		if(res == 1)
		{
			return "success";
		}else
		{
			return "数据库插入失败，res" + res;
		}
	}
	@Override
	public boolean uploadHousePic(MultipartFile file) {
		// TODO Auto-generated method stub
		String basePath = session.getServletContext().getRealPath("/");
		String dirPath = "/pic/";
		String path = basePath + dirPath;
		if(file.isEmpty())
		{ 
			return false;
		}
		try {
			File writeFile = null;
			String fileName = file.getOriginalFilename();//得到上传之前的文件名
			while(writeFile == null)
			{
				String[] fileNames = fileName.split("//.");
				fileName = RandomUtil.getRandomEnAndNumString(32) + "." + fileNames[fileNames.length-1];
				writeFile = new File(path + fileName);  		
			}
			file.transferTo(writeFile);//上传文件
			// 将文件名路径放在session中，准备将文件名路径插入数据库
			Object housePic = session.getAttribute("housePic");
			if(housePic == null)
			{
				session.setAttribute("housePic", dirPath + fileName);	
			}else
			{
				session.setAttribute("housePic", housePic + "," + dirPath + fileName);
			}
			
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			return false;
		}
		
		return true;
		
	}

}
